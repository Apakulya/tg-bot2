const TelegramApi = require('node-telegram-bot-api');
const {againOptions, gameOptions} = require("./options");
const sequelize = require('./db');
const userModel = require('./models')

const TOKEN = '7637674415:AAGT8WzQaD3KZv7jRwgiNHkgZ9PIMxqw3Sk'

const bot = new TelegramApi(TOKEN, {polling: true})

const chats = {}

const startGame = async (chatId) => {
    chats[chatId] = Math.floor(Math.random() * 10);
    await bot.sendMessage(chatId, `C–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!`, gameOptions);
}

const start = async () => {
    try {
        await sequelize.authenticate();
        await sequelize.sync()
    } catch (e) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ –ø–æ–ª–æ–º–∞–ª–æ—Å—å', e);
        await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!");
    }

    await bot.setMyCommands([
            {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
            {command: '/info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'},
            {command: '/game', description: '–ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"'},
            {command: '/clear_results', description: '–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'},
        ]
    )

    bot.on('message', async msg => {
        const chatId = msg.chat.id;
        const text = msg.text;

        const [user] = await userModel.findOrCreate({
            where: {
                chatId: chatId.toString()
            }
        });

        try {
            switch (text) {
                case '/start':
                    return bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç üëÄ!');
                case '/info':
                    return bot.sendMessage(
                        chatId,
                        `–¢–µ–±—è –∑–æ–≤—É—Ç: ${msg.from.first_name} ${msg.from.last_name || ''}\n\n` +
                        `üèÜ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.right}\n\n` +
                        `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.wrong}`,
                        { parse_mode: "Markdown" }
                    );                case '/game':
                    return await startGame(chatId);
                case '/clear_results':
                    await userModel.update({right: 0, wrong: 0}, {where: {chatId: chatId.toString()}});
                    return bot.sendMessage(chatId, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.');
                default:
                    return bot.sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòí.');
            }
        } catch (e) {
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
        }
    })

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if (data === '/again') {
            delete chats[chatId];
            await startGame(chatId);
            return;
        }

        if (!(chatId in chats)) {
            await bot.sendMessage(chatId, '–ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑"!');
            return;
        }

        const user = await userModel.findOne({
            where: {
                chatId: chatId.toString()
            }
        });

        const isCorrect = Number(data) === chats[chatId];

        const resultMessage = isCorrect
            ? `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${chats[chatId]}`
            : `üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª. –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª ${chats[chatId]}`;

        await userModel.update(
            {
                right: user.right + (isCorrect ? 1 : 0),
                wrong: user.wrong + (!isCorrect ? 1 : 0),
            },
            {where: {chatId: chatId.toString()}}
        );

        delete chats[chatId];

        await bot.sendMessage(chatId, resultMessage, againOptions);
    })
}

start();